from telegram import Update, ChatMember
from telegram.ext import ContextTypes, MessageHandler, filters
from telegram.helpers import mention_html
from handlers.admin.moderation_db import delete_custom_admin_role, role_exists, remove_role_from_all_users
from handlers.admin.admin_access import has_access


async def remove_admin_role_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    chat = update.effective_chat
    user = update.effective_user

    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        await message.reply_text("‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤–æ—Ç —Ç–∞–∫:\n!remove-admin-role –ù–∞–∑–≤–∞–Ω–∏–µ–†–æ–ª–∏")
        return

    role = parts[1].strip().title()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ
    try:
        member = await context.bot.get_chat_member(chat.id, user.id)
        if member.status != ChatMember.OWNER:
            if not has_access(chat.id, user.id, "!remove-admin-role"):
                await message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π.")
                return
    except:
        await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞.")
        return

    if not role_exists(chat.id, role):
        await message.reply_text(f"‚ùå –†–æ–ª—å <b>{role}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        return

    delete_custom_admin_role(chat.id, role)
    remove_role_from_all_users(chat.id, role)

    await message.reply_text(f"üóë –†–æ–ª—å <b>{role}</b> –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.", parse_mode="HTML")


remove_admin_role_handler_obj = MessageHandler(
    filters.TEXT & filters.Regex(r"^!remove-admin-role"), remove_admin_role_handler
)
