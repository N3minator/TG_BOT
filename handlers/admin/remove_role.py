from telegram import Update, ChatMember, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, MessageHandler, CallbackQueryHandler, filters
from telegram.helpers import mention_html

from core.check_group_chat import only_group_chats
from handlers.admin.moderation_db import (
    delete_custom_admin_role,
    role_exists,
    remove_role_from_all_users,
    get_all_user_roles,
    get_role_level,
    get_user_max_role_level
)
from handlers.admin.admin_access import has_access


@only_group_chats
async def remove_admin_role_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    chat = update.effective_chat
    user = update.effective_user

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞–∂–µ –¥–æ —Ä–∞–∑–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã)
    try:
        member = await context.bot.get_chat_member(chat.id, user.id)
    except Exception:
        await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞.")
        return

    is_owner = member.status == ChatMember.OWNER
    if not is_owner:
        if not has_access(chat.id, user.id, "!remove-role"):
            await message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π.")
            return

    # –¢–µ–ø–µ—Ä—å —Ä–∞–∑–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        await message.reply_text("‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤–æ—Ç —Ç–∞–∫:\n!remove-role –ù–∞–∑–≤–∞–Ω–∏–µ –†–æ–ª–∏")
        return

    role = parts[1].strip().title()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —É—Å–ª–æ–≤–∏–π —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ù–ï-–≤–ª–∞–¥–µ–ª—å—Ü–∞
    try:
        if not is_owner:
            # –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å
            user_roles = [r for uid, r in get_all_user_roles(chat.id) if uid == user.id]
            if role in user_roles:
                await message.reply_text("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å.")
                return

            target_level = get_role_level(chat.id, role)
            user_level = get_user_max_role_level(chat.id, user.id)

            # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã—à–µ —Ü–µ–ª–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π)
            if user_level >= target_level:
                await message.reply_text(
                    "‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —Å —Ç–∞–∫–∏–º –∂–µ –∏–ª–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞."
                )
                return
    except Exception:
        await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞.")
        return

    if not role_exists(chat.id, role):
        await message.reply_text(f"‚ùå –†–æ–ª—å <b>{role}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if member.user.username:
        mention = f"@{member.user.username}"
    else:
        mention = f"<a href='tg://user?id={user.id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>"
    confirmation_text = f"‚ö†Ô∏è {mention} –í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å <b>{role}</b>?"

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    confirm_button = InlineKeyboardButton("‚úÖ", callback_data=f"confirm_del_role|{role}|{user.id}")
    cancel_button = InlineKeyboardButton("‚ùå", callback_data=f"cancel_del_role|{role}|{user.id}")
    keyboard = InlineKeyboardMarkup([[confirm_button, cancel_button]])

    await message.reply_text(confirmation_text, parse_mode="HTML", reply_markup=keyboard)


async def confirm_remove_role_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()

    chat_id = query.message.chat.id
    user_id = query.from_user.id

    parts = query.data.split("|")
    if len(parts) != 3:
        await query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
    _, role, owner_id_str = parts
    owner_id = int(owner_id_str)

    if user_id != owner_id:
        await query.answer("‚õî –¢–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.", show_alert=True)
        return

    if not role_exists(chat_id, role):
        await query.edit_message_text(f"‚ùå –†–æ–ª—å <b>{role}</b> —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode="HTML")
        return

    delete_custom_admin_role(chat_id, role)
    remove_role_from_all_users(chat_id, role)

    await query.edit_message_text(f"üóë –†–æ–ª—å <b>{role}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", parse_mode="HTML")


async def cancel_remove_role_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


remove_admin_role_handler_obj = MessageHandler(
    filters.TEXT & filters.Regex(r"^!remove-role"), remove_admin_role_handler
)

confirm_remove_role_cb_obj = CallbackQueryHandler(confirm_remove_role_callback, pattern=r"^confirm_del_role\|")
cancel_remove_role_cb_obj = CallbackQueryHandler(cancel_remove_role_callback, pattern=r"^cancel_del_role\|")
