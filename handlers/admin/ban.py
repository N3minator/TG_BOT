import json
import os
import re
from datetime import datetime, timedelta
from telegram import Update, ChatMember
from telegram.ext import ContextTypes
from utils.users import get_user_id_by_username
from asyncio import create_task, sleep
from handlers.admin.cooldown_admin import check_cooldown, update_cooldown

ADMIN_DB = "database/admin_db.json"


def load_admins():
    if not os.path.exists(ADMIN_DB):
        return {}
    with open(ADMIN_DB, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except:
            return {}


def get_admin_level(user_id: str, chat_id: str, admins: dict) -> str:
    if chat_id in admins and user_id in admins[chat_id].get("admins", {}):
        return admins[chat_id]["admins"][user_id].get("level", "")
    return ""


def parse_duration(text: str):
    time_map = {
        'r': 31536000, '–¥': 86400, 'd': 86400,
        '—á': 3600, 'h': 3600,
        '–º': 60, 'm': 60,
        '—Å': 1, 's': 1
    }
    name_map = {
        'r': '–ª–µ—Ç', '–¥': '–¥–Ω–µ–π', 'd': '–¥–Ω–µ–π',
        '—á': '—á–∞—Å–æ–≤', 'h': '—á–∞—Å–æ–≤',
        '–º': '–º–∏–Ω—É—Ç', 'm': '–º–∏–Ω—É—Ç',
        '—Å': '—Å–µ–∫—É–Ω–¥', 's': '—Å–µ–∫—É–Ω–¥'
    }
    total_seconds = 0
    readable = []
    found = re.findall(r'(\d+)([rd—ádh–ºms—Å])', text)
    for value, unit in found:
        total_seconds += int(value) * time_map[unit]
        readable.append(f"{value} {name_map[unit]}")
    return total_seconds, ', '.join(readable)


async def unban_after_delay(context, chat_id, user_id, delay):
    await sleep(delay)
    try:
        await context.bot.unban_chat_member(chat_id, int(user_id), only_if_banned=True)
    except Exception:
        pass


async def ban_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    chat = update.effective_chat
    user = update.effective_user
    chat_id = str(chat.id)
    user_id = str(user.id)
    admins = load_admins()

    parts = message.text.strip().split(maxsplit=2)
    if not parts or len(parts) < 2:
        await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏—á–∏–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n!ban @user –ø—Ä–∏—á–∏–Ω–∞ 1d2h")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ coldown_admin.py
    admin_level = get_admin_level(user_id, chat_id, admins)
    remaining = check_cooldown(chat_id, user_id, admin_level)
    if remaining:
        await message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è !ban.")
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
    reason = ""
    duration_text = ""
    duration_seconds = 0
    formatted_duration = ""
    target_user_id = None
    target_username = None

    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
        target_user_id = str(target_user.id)
        target_username = target_user.username
        reason = parts[1] if len(parts) > 1 else ""
        if len(parts) > 2:
            duration_text = parts[2]
    else:
        if len(parts) < 3:
            await message.reply_text("–§–æ—Ä–º–∞—Ç: !ban @user –ø—Ä–∏—á–∏–Ω–∞ 1d2h")
            return
        target = parts[1]
        reason = parts[2]
        if target.startswith("@"):
            username = target[1:]
            uid = get_user_id_by_username(username)
            if not uid:
                await message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                return
            target_user_id = str(uid)
            target_username = username
        elif target.isdigit():
            target_user_id = target
        else:
            await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –∏–ª–∏ ID.")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ
    try:
        requester_status = await context.bot.get_chat_member(chat.id, user.id)
        if requester_status.status != ChatMember.OWNER:
            requester_level = get_admin_level(str(user.id), chat_id, admins)
            if requester_level not in ["–°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤—ã"]:
                await message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
    except Exception:
        await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞.")
        return

    # –ù–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
    try:
        target_status = await context.bot.get_chat_member(chat.id, int(target_user_id))
        if target_status.status == ChatMember.OWNER:
            await message.reply_text("–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã.")
            return
    except Exception:
        await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    requester_level = get_admin_level(str(user.id), chat_id, admins)
    target_level = get_admin_level(str(target_user_id), chat_id, admins)

    # –°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —Å–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è
    if requester_level == "–°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" and target_level in ["–°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤—ã"]:
        await message.reply_text("‚õî –°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–≤–æ–µ–≥–æ –∂–µ —Ä–∞–Ω–≥–∞ –∏–ª–∏ –≤—ã—à–µ.")
        return

    # –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤—ã –Ω–µ –º–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è
    if requester_level == "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤—ã" and target_level == "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤—ã":
        await message.reply_text("‚õî –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤—ã –Ω–µ –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –ì–ª–∞–≤—ã.")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ä–æ–∫–∞
    duration_seconds, formatted_duration = parse_duration(reason)
    if duration_seconds > 0:
        reason_parts = reason.rsplit(' ', 1)
        reason = reason_parts[0] if len(reason_parts) == 2 else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
        duration_text = formatted_duration

    if not reason:
        await message.reply_text("–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞.")
        return

    try:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.ban_chat_member(chat.id, int(target_user_id))

        mention = f"@{target_username}" if target_username else f"<a href='tg://user?id={target_user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>"
        admin_mention = user.mention_html()
        group_title = chat.title or "–≥—Ä—É–ø–ø–∞"

        text = (
            f"<b>üë§ –£—á–∞—Å—Ç–Ω–∏–∫ {mention} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n"
            f"<b>üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b> {admin_mention}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>"
        )

        if duration_seconds:
            unban_time = datetime.utcnow() + timedelta(seconds=duration_seconds) + timedelta(hours=2)
            formatted = unban_time.strftime('%Y-%m-%d %H:%M:%S GMT+2')
            text += f"\n‚è≥ –°—Ä–æ–∫: {formatted_duration}\nüîì –†–∞–∑–±–∞–Ω –≤: <b>{formatted}</b>"
            create_task(unban_after_delay(context, chat.id, target_user_id, duration_seconds))

        await message.reply_text(text, parse_mode="HTML")

        # –õ–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            private_text = (
                f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ –≥—Ä—É–ø–ø–µ <b>{group_title}</b>!\n\n"
                f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_mention}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>"
            )
            if duration_seconds:
                private_text += f"\n‚è≥ –°—Ä–æ–∫: {formatted_duration}\nüîì –†–∞–∑–±–∞–Ω –≤: <b>{formatted}</b>"
            await context.bot.send_message(chat_id=int(target_user_id), text=private_text, parse_mode="HTML")
        except Exception:
            pass

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω —á–µ—Ä–µ–∑ coldown_admin.py
        update_cooldown(chat_id, user_id, user.username, group_title)

    except Exception as e:
        await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")
