import sqlite3
import os
from datetime import datetime

# –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "database/moderation.db"


# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
def get_all_user_roles(chat_id: int):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, role FROM user_roles WHERE chat_id = ?", (chat_id,))
    result = cursor.fetchall()
    conn.close()
    return result


# üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –ë–î
def init_moderation_db():
    os.makedirs("database", exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–æ–ª–µ–π
    c.execute("""
        CREATE TABLE IF NOT EXISTS custom_admins (
            group_id INTEGER,
            title TEXT,
            created_by INTEGER,
            created_at TEXT,
            level INTEGER DEFAULT 99,
            PRIMARY KEY (group_id, title)
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∞–≤ —Ä–æ–ª–µ–π (–ø–æ –∫–æ–º–∞–Ω–¥–∞–º)
    c.execute("""
        CREATE TABLE IF NOT EXISTS admin_permissions (
            chat_id INTEGER,
            role TEXT,
            command TEXT,
            PRIMARY KEY (chat_id, role, command)
        )
    """)

    conn.commit()
    conn.close()


# üìå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏
def create_custom_admin(group_id: int, title: str, created_by: int, level: int) -> bool:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    try:
        c.execute("""
            INSERT INTO custom_admins (group_id, title, created_by, created_at, level)
            VALUES (?, ?, ?, ?, ?)
        """, (group_id, title, created_by, datetime.utcnow().isoformat(), level))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    finally:
        conn.close()


# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏
def custom_admin_exists(group_id: int, title: str) -> bool:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT 1 FROM custom_admins WHERE group_id = ? AND title = ?", (group_id, title))
    exists = c.fetchone() is not None
    conn.close()
    return exists


# üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã user_roles
def init_user_roles_db():
    os.makedirs("database", exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_roles (
        chat_id INTEGER,
        user_id INTEGER,
        role TEXT,
        PRIMARY KEY (chat_id, user_id, role)
        )
    """)
    conn.commit()
    conn.close()


# üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def assign_user_to_role(chat_id: int, user_id: int, role: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR IGNORE INTO user_roles (chat_id, user_id, role)
        VALUES (?, ?, ?)
    """, (chat_id, user_id, role))
    conn.commit()
    conn.close()


# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–ª–∏
def role_exists(chat_id: int, role: str) -> bool:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM custom_admins WHERE group_id = ? AND title = ?", (chat_id, role))
    exists = cursor.fetchone() is not None
    conn.close()
    return exists


# üìå –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏
def delete_custom_admin_role(chat_id: int, role: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM custom_admins WHERE group_id = ? AND title = ?", (chat_id, role))
    conn.commit()
    conn.close()


# üìå –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def remove_role_from_all_users(chat_id: int, role: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM user_roles WHERE chat_id = ? AND role = ?", (chat_id, role))
    conn.commit()
    conn.close()


# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–æ–ª–∏
def get_admin_permissions_for_role(chat_id: int, role: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS admin_permissions (
            chat_id INTEGER,
            role TEXT,
            command TEXT,
            PRIMARY KEY (chat_id, role, command)
        )
    """)

    cursor.execute(
        "SELECT command FROM admin_permissions WHERE chat_id = ? AND role = ?",
        (chat_id, role)
    )
    rows = cursor.fetchall()
    conn.close()
    return [row[0] for row in rows]


# üìå –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã (–≤–∫–ª/–≤—ã–∫–ª)
def toggle_admin_permission(chat_id: int, role: str, command: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–∞–≤–æ
    cursor.execute("""
        SELECT 1 FROM admin_permissions
        WHERE chat_id = ? AND role = ? AND command = ?
    """, (chat_id, role, command))
    exists = cursor.fetchone()

    if exists:
        # –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî —É–¥–∞–ª—è–µ–º (–∑–∞–ø—Ä–µ—â–∞–µ–º)
        cursor.execute("""
            DELETE FROM admin_permissions
            WHERE chat_id = ? AND role = ? AND command = ?
        """, (chat_id, role, command))
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º (—Ä–∞–∑—Ä–µ—à–∞–µ–º)
        cursor.execute("""
            INSERT INTO admin_permissions (chat_id, role, command)
            VALUES (?, ?, ?)
        """, (chat_id, role, command))

    conn.commit()
    conn.close()


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3...), –≥–¥–µ 1 ‚Äî —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π (–ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏, –∫–∞–∫ –≤ Discord).
def get_user_max_role_level(chat_id: int, user_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π (–≤—ã—Å—à–∏–π) —É—Ä–æ–≤–µ–Ω—å —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ —Ä–æ–ª–µ–π –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT ur.role, ca.level
        FROM user_roles ur
        JOIN custom_admins ca ON ur.role = ca.title AND ur.chat_id = ca.group_id
        WHERE ur.chat_id = ? AND ur.user_id = ?
    """, (chat_id, user_id))
    results = cursor.fetchall()
    conn.close()

    if not results:
        return 100  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–æ–ª–µ–π

    # –≤—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    return min(level for _, level in results)


def get_all_roles_with_levels(chat_id: int) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ä–æ–ª–∏: —É—Ä–æ–≤–µ–Ω—å} –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ.
    """
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT title, level FROM custom_admins WHERE group_id = ?", (chat_id,))
    results = cursor.fetchall()
    conn.close()
    return {title: level for title, level in results}


def get_user_roles(chat_id: int, user_id: int) -> list[str]:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM user_roles WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
    roles = [row[0] for row in cursor.fetchall()]
    conn.close()
    return roles


def get_role_level(chat_id: int, role: str) -> int:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT level FROM custom_admins WHERE group_id = ? AND title = ?", (chat_id, role))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else 99  # –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def get_highest_admin_level(chat_id: int, user_id: int) -> int:
    roles = get_user_roles(chat_id, user_id)
    levels = [get_role_level(chat_id, role) for role in roles]
    return min(levels) if levels else 99  # —á–µ–º –º–µ–Ω—å—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –æ–Ω –≤—ã—à–µ


def rename_custom_admin(chat_id: int, old_title: str, new_title: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE custom_admins SET title = ?
        WHERE group_id = ? AND title = ?
    """, (new_title, chat_id, old_title))

    cursor.execute("""
        UPDATE user_roles SET role = ?
        WHERE chat_id = ? AND role = ?
    """, (new_title, chat_id, old_title))

    cursor.execute("""
        UPDATE admin_permissions SET role = ?
        WHERE chat_id = ? AND role = ?
    """, (new_title, chat_id, old_title))
    conn.commit()
    conn.close()


def update_role_level(chat_id: int, role: str, level: int):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE custom_admins SET level = ?
        WHERE group_id = ? AND title = ?
    """, (level, chat_id, role))
    conn.commit()
    conn.close()

