# –ö–æ–º–∞–Ω–¥–∞ !clear-cmd <N>m ‚Äî —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –∏ –≤—ã–∑–æ–≤—ã –∫–æ–º–∞–Ω–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç.
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫—É—é "–º" –∏ –ª–∞—Ç–∏–Ω—Å–∫—É—é "m".
# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤.
# –£—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –¥–æ–≤–µ—Ä–∏—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π.
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DEBUG_CLEAR_CMD —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–≤–∫–ª—é—á–∏—Ç—å True/False).

from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters
from datetime import datetime, timedelta, timezone
import re

# ‚úÖ –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
DEBUG_CLEAR_CMD = True

# üîí –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
TRUSTED_IDS = [5403794760]

# üìå –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–æ–ª–∏ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ä–æ–ª—å-–ª–æ–≥–∏–∫–∞)
ALLOWED_ROLES = ["–≤–ª–∞–¥–µ–ª–µ—Ü", "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "—Å–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"]

# üß† –ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π: chat_id -> —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ–π –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
message_cache = {}

# üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏: chat_id -> datetime
last_clear_call = {}

# üßº –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
last_cache_reset = datetime.now(timezone.utc)


# === üîÅ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —á–∞—Ç–∞ (—Ä–∞–∑ –≤ 48 —á–∞—Å–æ–≤)
def cleanup_cache(chat_id):
    now = datetime.now(timezone.utc)
    cutoff = now - timedelta(hours=48)

    if chat_id in message_cache:
        message_cache[chat_id] = [m for m in message_cache[chat_id] if m["date"] > cutoff]

        if DEBUG_CLEAR_CMD:
            print(f"[–ö–≠–®] –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}. –û—Å—Ç–∞–ª–æ—Å—å: {len(message_cache[chat_id])}")


# === ‚è≥ –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
def time_until_cache_reset():
    now = datetime.now(timezone.utc)
    next_reset = last_cache_reset + timedelta(hours=48)
    remaining = next_reset - now
    total_hours = remaining.days * 24 + remaining.seconds // 3600
    minutes = (remaining.seconds % 3600) // 60
    return f"{total_hours}—á {minutes}–º"


# === üßº –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏
async def clear_cmd_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    user_text = update.message.text
    now = datetime.now(timezone.utc)

    # ‚úÖ –ê—Ä–≥—É–º–µ–Ω—Ç: –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏ —Å—É—Ñ—Ñ–∏–∫—Å "m" –∏–ª–∏ "–º"
    match = re.search(r"!clear-cmd\s+(\d+)\s*[–ºm]", user_text, re.IGNORECASE)
    if not match:
        time_msg = time_until_cache_reset()
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !clear-cmd <–º–∏–Ω—É—Ç—ã>m\n–ü—Ä–∏–º–µ—Ä: !clear-cmd 60m\n\n"
                 f"üßº –ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤.\n‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏: {time_msg}"
        )
        return

    minutes = int(match.group(1))

    # ‚è± –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π)
    if user_id not in TRUSTED_IDS:
        last_call = last_clear_call.get(chat_id)
        if last_call and now - last_call < timedelta(hours=1):
            await context.bot.send_message(chat_id=chat_id, text="‚è± –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑ –≤ —á–∞—Å.")
            return

    # üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    cleanup_cache(chat_id)

    # üì¶ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞
    deleted_count = 0
    cutoff_time = now - timedelta(minutes=minutes)

    if chat_id in message_cache:
        messages_to_delete = [
            msg for msg in message_cache[chat_id]
            if msg["date"] > cutoff_time and (
                msg["user_id"] == context.bot.id or (msg["text"] and msg["text"].startswith("!"))
            )
        ]

        if user_id not in TRUSTED_IDS:
            messages_to_delete = messages_to_delete[-100:]

        for msg in messages_to_delete:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg["message_id"])
                deleted_count += 1
                if DEBUG_CLEAR_CMD:
                    print(f"[–£–î–ê–õ–ï–ù–û] {msg['message_id']}: {msg['text'][:30]}")
            except Exception as e:
                if DEBUG_CLEAR_CMD:
                    print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {msg['message_id']}: {e}")
                continue

    last_clear_call[chat_id] = now

    await context.bot.send_message(chat_id=chat_id, text=f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}")


# === üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def cache_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = update.effective_message
        if not msg:
            return

        chat_id = msg.chat_id
        if chat_id not in message_cache:
            message_cache[chat_id] = []

        message_cache[chat_id].append({
            "message_id": msg.message_id,
            "user_id": msg.from_user.id if msg.from_user else None,
            "is_bot": msg.from_user.is_bot if msg.from_user else False,
            "text": msg.text or "",
            "date": msg.date
        })

        if len(message_cache[chat_id]) > 1000:
            message_cache[chat_id] = message_cache[chat_id][-1000:]

        if DEBUG_CLEAR_CMD:
            print(f"[–ö–≠–®] + {msg.message_id} ({'BOT' if msg.from_user and msg.from_user.is_bot else 'USER'}) ‚Äî {msg.text or ''}")

    except Exception as e:
        if DEBUG_CLEAR_CMD:
            print(f"[–û–®–ò–ë–ö–ê –ö–≠–®–ê] {e}")


# === üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
clear_cmd_handler_obj = MessageHandler(filters.Regex(r"^!clear-cmd"), clear_cmd_handler)
cache_handler_obj = MessageHandler(filters.ALL, cache_message)
