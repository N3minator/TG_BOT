from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import ContextTypes, MessageHandler, CallbackQueryHandler, filters

from core.check_group_chat import only_group_chats
from handlers.admin.admin_access import has_access
from handlers.admin.moderation_db import (
    role_exists,
    get_admin_permissions_for_role,
    toggle_admin_permission,
    get_all_user_roles,
    get_user_max_role_level,
    get_role_level,
    rename_custom_admin,
    update_role_level,
    delete_custom_admin_role,
    remove_role_from_all_users
)


# –•–≠–ù–î–õ–ï–†: !edit-admin <—Ä–æ–ª—å> ‚Äî –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤
@only_group_chats
async def edit_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        await message.reply_text("‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: !edit-admin –ù–∞–∑–≤–∞–Ω–∏–µ–†–æ–ª–∏")
        return

    role = parts[1].strip().title()

    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        is_owner = member.status == ChatMember.OWNER

        if not is_owner:
            if not has_access(chat_id, user_id, "!edit-admin"):
                await message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–æ–ª–µ–π.")
                return

            user_roles = [r for _, r in get_all_user_roles(chat_id) if _ == user_id]
            if role in user_roles:
                await message.reply_text("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å.")
                return

            role_level = get_role_level(chat_id, role)
            user_level = get_user_max_role_level(chat_id, user_id)
            if role_level <= user_level:
                await message.reply_text("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏ —Å —Ç–∞–∫–∏–º –∂–µ –∏–ª–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞.")
                return

    except Exception:
        await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞.")
        return

    if not role_exists(chat_id, role):
        await message.reply_text(f"‚ùå –†–æ–ª—å <b>{role}</b> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="HTML")
        return

    # üëá –ü–µ—Ä–µ–¥–∞—ë–º message_id –∏ user_id –∫–∞–∫ panel_owner_id
    await send_admin_permissions_message(context, chat_id, message.message_id, role, user_id)


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏
async def send_admin_permissions_message(
    context,
    chat_id,
    message_id,
    role,
    panel_owner_id,
    query=None,
    per_row_cmds=4,      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –≤ —Ä—è–¥ (–¥–æ 8 –∫–Ω–æ–ø–æ–∫ –≤ 1-–º —Ä—è–¥—É)
    per_row_options=2    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–π –≤ —Ä—è–¥ (–¥–æ 8 –∫–Ω–æ–ø–æ–∫ –≤ 1-–º —Ä—è–¥—É)
):
    # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ group.py
    ALL_COMMANDS = ["!ban", "!grant", "!edit-admin", "!new-role", "!remove-role", "!revoke", "!set-rules", "!del-rules", "!prefix"]
    allowed = get_admin_permissions_for_role(chat_id, role)

    # üßæ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∞–≤
    max_len = max(len(cmd) for cmd in ALL_COMMANDS) + 2
    left = [f"‚úÖ {cmd.ljust(max_len)}" for cmd in allowed]
    right = [f"‚ùå {cmd}" for cmd in ALL_COMMANDS if cmd not in allowed]
    while len(left) < len(right):
        left.append(" " * (max_len + 2))
    while len(right) < len(left):
        right.append("")
    table = "<pre>\n" + "\n".join(f"{a}| {b}" for a, b in zip(left, right)) + "\n</pre>"

    # üîò –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥
    command_buttons = []
    row = []
    for cmd in ALL_COMMANDS:
        emoji = "‚úÖ" if cmd in allowed else "‚ùå"
        callback = f"toggle|{cmd}|{role}|{panel_owner_id}"
        row.append(InlineKeyboardButton(f"{emoji} {cmd}", callback_data=callback))
        if len(row) == per_row_cmds:
            command_buttons.append(row)
            row = []
    if row:
        command_buttons.append(row)

    # üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ù–∞–∑–≤–∞–Ω–∏–µ / –£—Ä–æ–≤–µ–Ω—å)
    option_buttons_all = [
        InlineKeyboardButton("‚úè –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"editrole_name|{role}|{panel_owner_id}"),
        InlineKeyboardButton("üìä –£—Ä–æ–≤–µ–Ω—å", callback_data=f"editrole_level|{role}|{panel_owner_id}"),
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –†–æ–ª—å", callback_data=f"delete_role|{role}|{panel_owner_id}")
    ]
    option_rows = [
        option_buttons_all[i:i + per_row_options]
        for i in range(0, len(option_buttons_all), per_row_options)
    ]
    command_buttons.extend(option_rows)

    keyboard = InlineKeyboardMarkup(command_buttons)

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —Ä–æ–ª–∏
    lvl = get_role_level(chat_id, role)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è, –∫–∞–∫ –≤ view_admins.py
    header_text = f"üìã –ü—Ä–∞–≤–∞ —Ä–æ–ª–∏ <b>{role}</b> (lvl {lvl}):\n\n{table}"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if query:
        await query.edit_message_text(
            text=header_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=header_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )


# ‚úÖ Callback: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∞–≤
async def toggle_permission_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return

    await query.answer()
    chat_id = query.message.chat.id
    user_id = query.from_user.id

    try:
        # ‚úÖ –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ: toggle|cmd|role|owner_id
        parts = query.data.split("|")
        if len(parts) != 4:
            await query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        _, command, role, owner_id = parts
        owner_id = int(owner_id)
    except Exception:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ", show_alert=True)
        return

    # ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —á—É–∂–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if user_id != owner_id:
        await query.answer("‚õî –¢–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å", show_alert=True)
        return

    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        is_owner = member.status == ChatMember.OWNER

        if not is_owner:
            if not has_access(chat_id, user_id, "!edit-admin"):
                await query.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return

            if not has_access(chat_id, user_id, command):
                await query.answer(f"‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {command}", show_alert=True)
                return

            user_roles = [r for _, r in get_all_user_roles(chat_id) if _ == user_id]
            if role in user_roles:
                await query.answer("‚õî –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å", show_alert=True)
                return

            role_level = get_role_level(chat_id, role)
            user_level = get_user_max_role_level(chat_id, user_id)
            if role_level <= user_level:
                await query.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return

    except:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ", show_alert=True)
        return

    # ‚úÖ –ú–µ–Ω—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    toggle_admin_permission(chat_id, role, command)

    # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞–∫ –≤ edit_admin_handler ‚Äî —á–µ—Ä–µ–∑ —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é
    await send_admin_permissions_message(
        context=context,
        chat_id=chat_id,
        message_id=query.message.message_id,
        role=role,
        panel_owner_id=owner_id,
        query=query  # üëà –í–ê–ñ–ù–û: —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–æ—Å—å –Ω–æ–≤–æ–µ
    )


# üì• Callback: –≤—ã–±–æ—Ä ‚úè –ù–∞–∑–≤–∞–Ω–∏–µ / üî¢ –£—Ä–æ–≤–µ–Ω—å
async def edit_admin_option_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    await query.answer()

    try:
        action, role, owner_id = query.data.split("|")
        owner_id = int(owner_id)
    except ValueError:
        await query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–∞–Ω–µ–ª–∏ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    if user_id != owner_id:
        await query.answer("‚õî –¢–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º owner_id –∏–∑ callback data, –∞ –Ω–µ query.from_user.id
    context.user_data["edit_admin_mode"] = action.replace("editrole_", "")
    context.user_data["edit_admin_target_role"] = role
    context.user_data["edit_admin_owner"] = owner_id

    if context.user_data["edit_admin_mode"] == "name":
        await query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏:")
    elif context.user_data["edit_admin_mode"] == "level":
        await query.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999):")


# üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–∏–º–µ–Ω–∏ –∏–ª–∏ —É—Ä–æ–≤–Ω—è)
async def edit_admin_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∞–≤–∫–∏ —É—Ä–æ–≤–Ω—è
    if (
        context.user_data.get("edit_admin_owner") != user_id
        or context.user_data.get("edit_admin_mode") != "level"
        or "edit_admin_target_role" not in context.user_data
    ):
        return

    role = context.user_data["edit_admin_target_role"]

    # 1) –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞
    if not text.isdigit():
        await message.reply_text("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    level = int(text)
    if not (1 <= level <= 999):
        await message.reply_text("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 999.")
        return

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    member = await context.bot.get_chat_member(chat_id, user_id)
    is_owner = (member.status == ChatMember.OWNER)
    if not is_owner:
        admin_level = get_user_max_role_level(chat_id, user_id)
        # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
        # **–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã–π** —Å–≤–æ–µ–º—É (—á–∏—Å–ª–µ–Ω–Ω–æ ‚â§)
        if level <= admin_level:
            await message.reply_text(
                "‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–æ–ª–∏ —Ä–∞–≤–Ω—ã–º –∏–ª–∏ –≤—ã—à–µ –≤–∞—à–µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return

    # 3) –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    update_role_level(chat_id, role, level)
    await message.reply_text(
        f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Ä–æ–ª–∏ <b>{role}</b> –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ <b>{level}</b>.",
        parse_mode="HTML"
    )

    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∞–≤–∫–∏
    context.user_data.pop("edit_admin_mode", None)
    context.user_data.pop("edit_admin_target_role", None)
    context.user_data.pop("edit_admin_owner", None)


async def delete_role_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()

    chat_id = query.message.chat.id
    user_id = query.from_user.id
    _, role, owner_id_str = query.data.split("|")
    owner_id = int(owner_id_str)

    # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø–∞–Ω–µ–ª–∏ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å
    if user_id != owner_id:
        await query.answer("‚õî –¢–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
    if not role_exists(chat_id, role):
        await query.answer("‚ùå –†–æ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —É—Ä–æ–≤–Ω–∏
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        is_owner = member.status == ChatMember.OWNER
    except Exception:
        await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞.", show_alert=True)
        return

    # –ï—Å–ª–∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ä–æ–≤–Ω–µ–π –∫–∞–∫ –≤ remove_role.py
    if not is_owner:
        if not has_access(chat_id, user_id, "!remove-role"):
            await query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π.", show_alert=True)
            return

        # –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å
        user_roles = [r for uid, r in get_all_user_roles(chat_id) if uid == user_id]
        if role in user_roles:
            await query.answer("‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å.", show_alert=True)
            return

        target_level = get_role_level(chat_id, role)
        user_level = get_user_max_role_level(chat_id, user_id)
        # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—ã—à–µ —Ü–µ–ª–∏
        if user_level >= target_level:
            await query.answer(
                "‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —Å —Ç–∞–∫–∏–º –∂–µ –∏–ª–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞.",
                show_alert=True
            )
            return

    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    mention = member.user.username and f"@{member.user.username}" or \
              f"<a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>"
    confirmation_text = f"‚ö†Ô∏è {mention} –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å <b>{role}</b>?"
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ", callback_data=f"confirm_del|{role}|{owner_id}"),
        InlineKeyboardButton("‚ùå", callback_data=f"cancel_del|{role}|{owner_id}")
    ]])
    await query.edit_message_text(text=confirmation_text, parse_mode="HTML", reply_markup=keyboard)


# Callback: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
async def confirm_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer()

    chat_id = query.message.chat.id
    user_id = query.from_user.id
    _, role, owner_id_str = query.data.split("|")
    owner_id = int(owner_id_str)

    # –¢–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    if user_id != owner_id:
        await query.answer("‚õî –¢–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not role_exists(chat_id, role):
        await query.edit_message_text(f"‚ùå –†–æ–ª—å <b>{role}</b> —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode="HTML")
        return

    # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å –∏ –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    delete_custom_admin_role(chat_id, role)
    remove_role_from_all_users(chat_id, role)

    await query.edit_message_text(f"üóëÔ∏è –†–æ–ª—å <b>{role}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", parse_mode="HTML")


# Callback –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
async def cancel_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return
    await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–∏–±–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—Ç–º–µ–Ω–µ
    await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


edit_admin_option_cb_obj = CallbackQueryHandler(edit_admin_option_callback, pattern=r"^editrole_")
edit_admin_text_handler_obj = MessageHandler(filters.TEXT & ~filters.COMMAND, edit_admin_text_handler)

# ‚úÖ –û–±—ä–µ–∫—Ç—ã —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ setup_handlers.py

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –†–æ–ª—å"
delete_role_cb_obj = CallbackQueryHandler(delete_role_callback, pattern=r"^delete_role\|")
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
confirm_delete_cb_obj = CallbackQueryHandler(confirm_delete_callback, pattern=r"^confirm_del\|")
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
cancel_delete_cb_obj = CallbackQueryHandler(cancel_delete_callback, pattern=r"^cancel_del\|")

edit_admin_handler_obj = MessageHandler(filters.Regex(r"^!edit-admin\b"), edit_admin_handler)
edit_admin_toggle_cb_obj = CallbackQueryHandler(toggle_permission_callback, pattern=r"^toggle\|")
