import logging
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatMember
from telegram.ext import ContextTypes

ADMIN_DB = "database/admin_db.json"
STATS_DB = "database/group_stats.json"


async def group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    chat = update.effective_chat
    try:
        member_count = await context.bot.get_chat_member_count(chat.id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {type(e).__name__} - {e}")
        member_count = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"

    caller_id = update.effective_user.id

    info_page1 = (
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:</b>\n"
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
        f"üÜî ID: {chat.id}\n"
        f"üìö –¢–∏–ø: {chat.type}\n"
    )
    if chat.username:
        info_page1 += f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{chat.username}\n"
    info_page1 += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}"

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"group_refresh|{caller_id}|page1"),
            InlineKeyboardButton("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/3", callback_data=f"group_page1|{caller_id}")
        ],
        [
            InlineKeyboardButton("‚è™ << –ù–∞–∑–∞–¥", callback_data=f"group_prev|{caller_id}|page1"),
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >> ‚è©", callback_data=f"group_next|{caller_id}|page1")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_text(info_page1, reply_markup=reply_markup, parse_mode="HTML")


async def group_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    parts = data.split("|")
    action = parts[0]
    try:
        caller_id = int(parts[1])
    except (IndexError, ValueError):
        caller_id = None
    try:
        current_page = parts[2]
    except IndexError:
        current_page = "page1"

    if caller_id and query.from_user.id != caller_id:
        await query.answer("–≠—Ç—É –ø–∞–Ω–µ–ª—å –≤—ã–∑—ã–≤–∞–ª –Ω–µ –≤—ã!", show_alert=True)
        return

    chat = update.effective_chat
    try:
        member_count = await context.bot.get_chat_member_count(chat.id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {type(e).__name__} - {e}")
        member_count = "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"

    if action == "group_page1":
        next_page = "page1"
    elif action == "group_page2":
        next_page = "page2"
    elif action == "group_page3":
        next_page = "page3"
    elif action == "group_refresh":
        next_page = current_page
    elif action == "group_next":
        if current_page == "page1":
            next_page = "page2"
        elif current_page == "page2":
            next_page = "page3"
        else:
            next_page = "page1"
    elif action == "group_prev":
        if current_page == "page1":
            next_page = "page3"
        elif current_page == "page2":
            next_page = "page1"
        else:
            next_page = "page2"
    else:
        next_page = current_page

    if next_page == "page1":
        text_content = (
            f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:</b>\n"
            f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            f"üÜî ID: {chat.id}\n"
            f"üìö –¢–∏–ø: {chat.type}\n"
        )
        if chat.username:
            text_content += f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: @{chat.username}\n"
        text_content += f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
        if action == "group_refresh":
            text_content += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ! {datetime.now().strftime('%H:%M:%S')}"

    elif next_page == "page2":
        text_content = "üëÆ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã:</b>\n\n"
        try:
            with open(ADMIN_DB, "r", encoding="utf-8") as f:
                admin_data = json.load(f)
            if str(chat.id) in admin_data and "admins" in admin_data[str(chat.id)]:
                all_admins = admin_data[str(chat.id)]["admins"]
                if all_admins:
                    zam_list = []
                    sor_list = []
                    other_list = []
                    for admin_id, info in all_admins.items():
                        level = info.get("level", "")
                        username = info.get("username") or f"ID {admin_id}"
                        if level == "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ª–∞–≤—ã":
                            zam_list.append((admin_id, username, level))
                        elif level == "–°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å":
                            sor_list.append((admin_id, username, level))
                        else:
                            other_list.append((admin_id, username, level))

                    if zam_list:
                        text_content += "<b>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏ –ì–ª–∞–≤—ã:</b>\n"
                        for adm in zam_list:
                            adm_id, adm_name, adm_level = adm
                            text_content += f"‚Ä¢ {adm_name} ‚Äî {adm_level}\n"
                        text_content += "\n"
                    if sor_list:
                        text_content += "<b>–°–æ—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏:</b>\n"
                        for adm in sor_list:
                            adm_id, adm_name, adm_level = adm
                            text_content += f"‚Ä¢ {adm_name} ‚Äî {adm_level}\n"
                        text_content += "\n"
                    if other_list:
                        text_content += "<b>–ü—Ä–æ—á–∏–µ –∞–¥–º–∏–Ω—ã:</b>\n"
                        for adm in other_list:
                            adm_id, adm_name, adm_level = adm
                            text_content += f"‚Ä¢ {adm_name} ‚Äî {adm_level}\n"
                    if not (zam_list or sor_list or other_list):
                        text_content += "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ.\n"
                else:
                    text_content += "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ.\n"
            else:
                text_content += "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∞—Ö.\n"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {ADMIN_DB}: {e}")
            text_content += f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}"
        if action == "group_refresh":
            text_content += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ! {datetime.now().strftime('%H:%M:%S')}"

    elif next_page == "page3":
        try:
            with open(STATS_DB, "r", encoding="utf-8") as f:
                stats_data = json.load(f)
            group_stats = stats_data.get(str(chat.id), {})
            messages = group_stats.get("messages", 0)
            active = group_stats.get("active_users", 0)
            bans = group_stats.get("bans", 0)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {STATS_DB}: {e}")
            messages, active, bans = 0, 0, 0

        text_content = (
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:</b>\n\n"
            f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å—É—Ç–∫–∏: <b>{messages}</b>\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{active}</b>\n"
            f"‚õîÔ∏è –ë–∞–Ω(–æ–≤) –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{bans}</b>\n"
            
            """\n–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –ü–æ—á–µ–º—É? –ú–Ω–µ –ø—Ä–æ—Å—Ç–æ - –ª–µ–Ω—å.
            
            –ê –Ω—É –∏ –µ—â—ë —Ç—É—Ç –±—É–¥–µ—Ç —Ç–∏—Ä –ª–∏—Å—Ç —Ç–æ–ø 10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (–ë—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –º–µ—Å—Ç–∞, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π)
            –ò —Ç–æ–ø 5 —Å–∞–º—ã—Ö —Å—Ç—Ä–∞—à–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –≤—Å–µ—Ö –∑–∞–±–∞–Ω–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
            
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ 3 –±–ª–æ–∫–∞. 1 –±–ª–æ–∫ - —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å.
            –ò —Ç–∞–∫ –º–∞–∫—Å–∏–º—É–º 3 –±–ª–æ–∫–∞. –ì–¥–µ –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏ –ø–µ—Ä–µ–¥ –≤–Ω–µ—Å–µ–Ω–∏–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ–≥–æ.
            –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ —É–¥–∞–ª–∏—Ç—å—Å—è. –ò —Ç–∞–∫–æ–π –ª–æ–≥–∏–∫–æ–π —Å–º–æ–∂–µ–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤ –≥—Ä—É–ø–ø—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è ^^
            """
        )
        if action == "group_refresh":
            text_content += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ! {datetime.now().strftime('%H:%M:%S')}"

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"group_refresh|{caller_id}|{next_page}"),
            InlineKeyboardButton(
                f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {next_page[-1]}/3",
                callback_data=f"group_{next_page}|{caller_id}"
            )
        ],
        [
            InlineKeyboardButton("‚è™ << –ù–∞–∑–∞–¥", callback_data=f"group_prev|{caller_id}|{next_page}"),
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >> ‚è©", callback_data=f"group_next|{caller_id}|{next_page}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=text_content,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
