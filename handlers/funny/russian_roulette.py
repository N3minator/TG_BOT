# handlers/funny/russian_roulette.py

import json
import asyncio
import random
from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
from utils.users import get_user_id_by_username

LOBBY_DB = "database/roulette_lobbies.json"
SETTINGS_DB = "database/roulette_settings.json"


# === –ê–≤—Ç–æ-—Ç–∞–π–º–µ—Ä —Ö–æ–¥–∞ ===
async def auto_shoot_timeout(chat_id, context, player_id):
    await asyncio.sleep(60)
    lobby = context.chat_data.get(chat_id)
    if not lobby or lobby.get("waiting") != player_id:
        return

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚è± –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–≥—Ä–æ–∫ <a href='tg://user?id={player_id}'>@{lobby['player_names'][player_id]}</a> —Å–∞–º —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ —Å–µ–±—è",
        parse_mode="HTML"
    )
    await shootme_forced(chat_id, context, player_id)


# === –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª –≤ —Å–µ–±—è ===
async def shootme_forced(chat_id, context, user_id):
    lobby = context.chat_data.get(chat_id)
    if not lobby or lobby["state"] != "active":
        return

    if not lobby["bullets"]:
        return

    lobby["waiting"] = None
    result = lobby["bullets"].pop(0)
    if result == "blank":
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üî´ <a href='tg://user?id={user_id}'>@{lobby['player_names'][user_id]}</a> —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ —Å–µ–±—è ‚Äî <b>–ü—Ä–æ–º–∞—Ö!</b>",
            parse_mode="HTML"
        )
        await show_status(chat_id, context, lobby)
        lobby["waiting"] = user_id
        asyncio.create_task(auto_shoot_timeout(chat_id, context, user_id))
    else:
        lobby["dead"].append(user_id)
        lobby["alive"].remove(user_id)
        lobby["bullets"] = lobby["original_bullets"].copy()
        random.shuffle(lobby["bullets"])
        if lobby["current_index"] >= len(lobby["alive"]):
            lobby["current_index"] = 0

        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üí• <a href='tg://user?id={user_id}'>@{lobby['player_names'][user_id]}</a> —É–±–∏—Ç!",
            parse_mode="HTML"
        )
        await show_status(chat_id, context, lobby)
        await next_turn_or_end(chat_id, context, lobby)


# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã ===
async def endgame_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = str(message.chat_id)
    user_id = str(message.from_user.id)

    lobby = context.chat_data.get(chat_id)
    if not lobby:
        return await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    if lobby["host"] != user_id:
        return await message.reply_text("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É!")

    del context.chat_data[chat_id]
    await message.reply_text("‚ùå –ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ö–æ—Å—Ç–æ–º.")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ ===
def is_player_turn(chat_id, context, user_id):
    lobby = context.chat_data.get(chat_id)
    return (
        lobby and lobby.get("state") == "active"
        and lobby.get("waiting") == user_id
    )


# === –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã ===
async def show_status(chat_id, context, lobby):
    alive = [f"<a href='tg://user?id={pid}'>@{lobby['player_names'][pid]}</a>" for pid in lobby['alive']]
    dead = [f"<a href='tg://user?id={pid}'>@{lobby['player_names'][pid]}</a>" for pid in lobby['dead']]
    bullets = lobby.get("bullets", [])
    blanks = bullets.count("blank")
    live = bullets.count("live")

    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            f"üí• –ü–∞—Ç—Ä–æ–Ω—ã: {blanks} —Ö–æ–ª–æ—Å—Ç—ã—Ö, {live} –±–æ–µ–≤—ã—Ö\n"
            f"üôÇ –ñ–∏–≤—ã–µ: {len(alive)} ‚Äî {', '.join(alive)}\n"
            f"‚ò†Ô∏è –ú–µ—Ä—Ç–≤—ã–µ: {len(dead)} ‚Äî {', '.join(dead) if dead else '‚Äî'}"
        ),
        parse_mode="HTML"
    )


# === –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã ===
async def next_turn_or_end(chat_id, context, lobby):
    if len(lobby["alive"]) == 1:
        winner_id = lobby["alive"][0]
        winner_name = lobby["player_names"].get(winner_id, winner_id)
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <a href='tg://user?id={winner_id}'>@{winner_name}</a>",
            parse_mode="HTML"
        )
        del context.chat_data[chat_id]
    else:
        current_player = lobby["alive"][lobby["current_index"]]
        lobby["waiting"] = current_player
        current_name = lobby["player_names"].get(current_player, "–ò–≥—Ä–æ–∫")
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"üîÅ –°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: <a href='tg://user?id={current_player}'>@{current_name}</a>\n"
                f"–ö–æ–º–∞–Ω–¥—ã: \n<code>!shootme</code> –∏–ª–∏ <code>!shoot @username</code> –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                f"‚è≥ –£ —Ç–µ–±—è 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥!"
            ),
            parse_mode="HTML"
        )
        asyncio.create_task(auto_shoot_timeout(chat_id, context, current_player))


# === –•–æ–¥: –≤—ã—Å—Ç—Ä–µ–ª –≤ —Å–µ–±—è ===
async def shootme_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = str(message.chat_id)
    user_id = str(message.from_user.id)

    if not is_player_turn(chat_id, context, user_id):
        return await message.reply_text("‚õî –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")

    lobby = context.chat_data.get(chat_id)
    lobby["waiting"] = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    await shootme_forced(chat_id, context, user_id)


# === –•–æ–¥: –≤—ã—Å—Ç—Ä–µ–ª –≤ –¥—Ä—É–≥–æ–≥–æ ===
async def shoot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = str(message.chat_id)
    user_id = str(message.from_user.id)

    if not is_player_turn(chat_id, context, user_id):
        return await message.reply_text("‚õî –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")

    lobby = context.chat_data.get(chat_id)
    lobby["waiting"] = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏—è–º–∏

    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
        target_user_id = str(target_user.id)
    else:
        parts = message.text.strip().split()
        if len(parts) < 2 or not parts[1].startswith("@"):
            return await message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å —á–µ—Ä–µ–∑ @username –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        username = parts[1][1:]
        target_user_id = get_user_id_by_username(username)
        if not target_user_id:
            return await message.reply_text("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∂–∏–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

    if target_user_id not in lobby["alive"]:
        return await message.reply_text("–ò–≥—Ä–æ–∫ —É–∂–µ –º–µ—Ä—Ç–≤ –∏–ª–∏ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ.")

    result = lobby["bullets"].pop(0)
    if result == "blank":
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"üî´ <a href='tg://user?id={user_id}'>@{lobby['player_names'][user_id]}</a> –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ <a href='tg://user?id={target_user_id}'>@{lobby['player_names'][target_user_id]}</a> ‚Äî <b>–ü—Ä–æ–º–∞—Ö!</b>"
            ),
            parse_mode="HTML"
        )
        lobby["current_index"] = (lobby["current_index"] + 1) % len(lobby["alive"])
    else:
        lobby["dead"].append(target_user_id)
        lobby["alive"].remove(target_user_id)
        lobby["bullets"] = lobby["original_bullets"].copy()
        random.shuffle(lobby["bullets"])
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"üî´ <a href='tg://user?id={user_id}'>@{lobby['player_names'][user_id]}</a> –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –≤ <a href='tg://user?id={target_user_id}'>@{lobby['player_names'][target_user_id]}</a> ‚Äî üíÄ <b>–£–±–∏—Ç!</b>"
            ),
            parse_mode="HTML"
        )
        if lobby["current_index"] >= len(lobby["alive"]):
            lobby["current_index"] = 0

    await show_status(chat_id, context, lobby)
    await next_turn_or_end(chat_id, context, lobby)


# === –•–µ–Ω–¥–ª–µ—Ä –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã !roulette ===
async def roulette_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = str(message.chat_id)
    user_id = str(message.from_user.id)

    if chat_id in context.chat_data and context.chat_data[chat_id].get("state") in ["lobby", "active"]:
        return await message.reply_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞!")

    context.chat_data[chat_id] = {
        "state": "lobby",
        "host": user_id,
        "players": [user_id],
        "player_names": {user_id: message.from_user.first_name},
        "joined_time": datetime.now().timestamp()
    }

    await message.reply_html(
        f"üé≤ <b>{message.from_user.first_name}</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ <b>–†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É!</b>\n\n"
        f"–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ <code>!join</code>\n"
        f"–•–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Ä–∞–Ω—å—à–µ –∫–æ–º–∞–Ω–¥–æ–π <code>!startgame</code>\n"
        f"‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
    )


# === –•–µ–Ω–¥–ª–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ !join ===
async def join_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = str(message.chat_id)
    user = message.from_user
    user_id = str(user.id)

    lobby = context.chat_data.get(chat_id)
    if not lobby or lobby.get("state") != "lobby":
        return

    if user_id in lobby["players"]:
        return await message.reply_text("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")

    lobby["players"].append(user_id)
    lobby["player_names"][user_id] = user.first_name

    await message.reply_html(f"‚úÖ <b>{user.first_name}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")


# === –•–µ–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã !startgame ===
async def start_game_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = str(message.chat_id)
    user_id = str(message.from_user.id)

    lobby = context.chat_data.get(chat_id)
    if not lobby or lobby.get("state") != "lobby":
        return await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–æ–±–±–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")

    if lobby["host"] != user_id:
        return await message.reply_text("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")

    if len(lobby["players"]) < 2:
        del context.chat_data[chat_id]
        return await message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    blanks = 5
    lives = 1
    bullets = ["blank"] * blanks + ["live"] * lives
    random.shuffle(bullets)

    random.shuffle(lobby["players"])
    lobby.update({
        "state": "active",
        "alive": lobby["players"].copy(),
        "dead": [],
        "bullets": bullets,
        "original_bullets": bullets.copy(),
        "current_index": 0,
        "waiting": None
    })

    await message.reply_text("üí• –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")
    await show_status(chat_id, context, lobby)
    await next_turn_or_end(chat_id, context, lobby)
