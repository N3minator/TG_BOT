import sqlite3
import random
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from core.check_group_chat import only_group_chats
from utils.users import get_user_id_by_username, register_user
from handlers.admin.admin_access import has_access
from handlers.admin.moderation_db import get_user_max_role_level
from telegram.helpers import mention_html
from telegram.constants import ParseMode

DB_PATH = 'database/whale_game.db'


# ====== Database Initialization ======
def init_whale_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS players (
            chat_id INTEGER,
            user_id INTEGER,
            pet_name TEXT,
            weight REAL DEFAULT 0,
            balance REAL DEFAULT 0,
            last_feed TEXT,
            PRIMARY KEY(chat_id, user_id)
        )
    """
    )
    c.execute("""
        CREATE TABLE IF NOT EXISTS settings (
            chat_id INTEGER,
            key TEXT,
            value TEXT,
            PRIMARY KEY(chat_id, key)
        )
    """
    )
    c.execute("""
        CREATE TABLE IF NOT EXISTS game_admins (
            chat_id INTEGER,
            user_id INTEGER,
            PRIMARY KEY(chat_id, user_id)
        )
    """
    )
    conn.commit()
    conn.close()


init_whale_db()


# ====== Helper Functions ======
def get_setting(chat_id: int, key: str, default=None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT value FROM settings WHERE chat_id=? AND key=?", (chat_id, key))
    row = c.fetchone()
    conn.close()
    return row[0] if row else default


def set_setting(chat_id: int, key: str, value: str):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("REPLACE INTO settings(chat_id, key, value) VALUES(?,?,?)", (chat_id, key, value))
    conn.commit()
    conn.close()


def is_game_admin(chat_id: int, user_id: int):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT 1 FROM game_admins WHERE chat_id=? AND user_id=?", (chat_id, user_id))
    ok = c.fetchone() is not None
    conn.close()
    return ok


# ====== Commands ======
@only_group_chats
async def whale_admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏–≥—Ä–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: !whale-admin @user/ID"""
    msg = update.message
    parts = msg.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply_text("‚ùî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !whale-admin '@username –∏–ª–∏ ID'")
    arg = parts[1]
    owner = await context.bot.get_chat_member(update.effective_chat.id, update.effective_user.id)
    if owner.status != 'creator':
        return await msg.reply_text("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤ –∏–≥—Ä—ã.")
    if arg.startswith('@'):
        uid = get_user_id_by_username(arg[1:])
        if not uid:
            return await msg.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif arg.isdigit():
        uid = int(arg)
    else:
        return await msg.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ ID.")
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("REPLACE INTO game_admins(chat_id, user_id) VALUES(?,?)", (update.effective_chat.id, uid))
    conn.commit()
    conn.close()
    await msg.reply_text(f"‚úÖ –ò–≥—Ä–æ–≤–æ–π –∞–¥–º–∏–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω: {arg}")


@only_group_chats
async def whale_admins_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: !whale-admins"""
    msg = update.message
    chat_id = update.effective_chat.id
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT user_id FROM game_admins WHERE chat_id=?", (chat_id,))
    rows = c.fetchall()
    conn.close()
    if not rows:
        return await msg.reply_text("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏–≥—Ä—ã.")
    mentions = []
    for (uid,) in rows:
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            mentions.append(mention_html(uid, member.user.first_name))
        except:
            mentions.append(f"ID {uid}")
    await msg.reply_text("üëë –ò–≥—Ä–æ–≤—ã–µ –∞–¥–º–∏–Ω—ã: " + ', '.join(mentions), parse_mode=ParseMode.HTML)


@only_group_chats
async def whale_admin_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–Ω—è—Ç—å –∏–≥—Ä–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞: !whale-admin-remove @user/ID"""
    msg = update.message
    parts = msg.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply_text("‚ùî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !whale-admin-remove '@username –∏–ª–∏ ID'")
    arg = parts[1]
    owner = await context.bot.get_chat_member(update.effective_chat.id, update.effective_user.id)
    if owner.status != 'creator':
        return await msg.reply_text("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤ –∏–≥—Ä—ã.")
    if arg.startswith('@'):
        uid = get_user_id_by_username(arg[1:])
        if not uid:
            return await msg.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif arg.isdigit():
        uid = int(arg)
    else:
        return await msg.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞.")
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("DELETE FROM game_admins WHERE chat_id=? AND user_id=?", (update.effective_chat.id, uid))
    conn.commit()
    conn.close()
    await msg.reply_text(f"üóëÔ∏è –ò–≥—Ä–æ–≤–æ–π –∞–¥–º–∏–Ω —É–¥–∞–ª—ë–Ω: {arg}")


@only_group_chats
async def set_game_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """!whale-set <key> <value>"""
    msg = update.message
    parts = msg.text.strip().split(maxsplit=2)
    if len(parts) < 3:
        return await msg.reply_text("‚ùî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !whale-set <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>")
    key, value = parts[1], parts[2]
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    member = await context.bot.get_chat_member(chat_id, user_id)
    if member.status != 'creator' and not is_game_admin(chat_id, user_id):
        return await msg.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã.")

    valid_keys = {'cooldown','gain_min','gain_max','loss_min','loss_max','chance','coeff','object_name'}
    if key not in valid_keys:
        return await msg.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: " + ', '.join(valid_keys))

    # Validate numeric relationships
    try:
        if key in ('gain_min','gain_max','loss_min','loss_max','chance','coeff'):
            num = int(value)
            if num < 0:
                raise ValueError
        prefix = ''
        # For relational keys, fetch counterpart
        if key == 'gain_min':
            gm = int(get_setting(chat_id,'gain_max','10'))
            if num > gm:
                return await msg.reply_text(f"‚ùå gain_min ({num}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ gain_max ({gm}).")
        if key == 'gain_max':
            gn = int(get_setting(chat_id,'gain_min','1'))
            if num < gn:
                return await msg.reply_text(f"‚ùå gain_max ({num}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ gain_min ({gn}).")
        if key == 'loss_min':
            lm = int(get_setting(chat_id,'loss_max','5'))
            if num > lm:
                return await msg.reply_text(f"‚ùå loss_min ({num}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ loss_max ({lm}).")
        if key == 'loss_max':
            ln = int(get_setting(chat_id,'loss_min','1'))
            if num < ln:
                return await msg.reply_text(f"‚ùå loss_max ({num}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ loss_min ({ln}).")
        if key == 'chance' and not (0 <= num <= 100):
            return await msg.reply_text("‚ùó chance –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.")
    except ValueError:
        return await msg.reply_text("‚ùó –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")

    # Save setting
    set_setting(chat_id, key, value)
    await msg.reply_text(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ <b>{key}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ <b>{value}</b>", parse_mode=ParseMode.HTML)


@only_group_chats
async def set_whale_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    parts = msg.text.strip().split(maxsplit=2)
    if len(parts) < 2:
        return await msg.reply_text("‚ùî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !whale-name –ù–æ–≤–æ–µ–ò–º—è –∏–ª–∏ !whale-name @user –ù–æ–≤–æ–µ–ò–º—è")
    chat_id = update.effective_chat.id
    caller_id = update.effective_user.id
    if len(parts) == 2:
        target_id = caller_id
        new_name = parts[1].strip()
    else:
        arg, new_name = parts[1], parts[2].strip()
        if arg.startswith('@'):
            target_id = get_user_id_by_username(arg[1:])
            if not target_id:
                return await msg.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif arg.isdigit():
            target_id = int(arg)
        else:
            return await msg.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ ID.")
    if not 1 <= len(new_name) <= 16 or '\n' in new_name:
        return await msg.reply_text("‚ùó –ò–º—è –ø–∏—Ç–æ–º—Ü–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1‚Äì16 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤.")
    if target_id != caller_id:
        member = await context.bot.get_chat_member(chat_id, caller_id)
        if member.status != 'creator' and not is_game_admin(chat_id, caller_id):
            return await msg.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—è—Ç—å –∏–º—è –¥—Ä—É–≥–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.")
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT 1 FROM players WHERE chat_id=? AND user_id=?", (chat_id, target_id))
    if not c.fetchone():
        conn.close()
        return await msg.reply_text("‚ùó –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !whale '–ò–º—è –ø–∏—Ç–æ–º—Ü–∞'.")
    c.execute("UPDATE players SET pet_name=? WHERE chat_id=? AND user_id=?", (new_name, chat_id, target_id))
    conn.commit()
    conn.close()
    await msg.reply_text(
        f"{'‚úÖ –í–∞—à –ø–∏—Ç–æ–º–µ—Ü' if target_id==caller_id else f'‚úÖ –ü–∏—Ç–æ–º–µ—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ <b>{new_name}</b>",
        parse_mode=ParseMode.HTML
    )


@only_group_chats
async def register_whale(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    parts = msg.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        return await msg.reply_text("‚ùî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !whale '–ò–º—è –ø–∏—Ç–æ–º—Ü–∞'")
    name = parts[1].strip()
    if not 1 <= len(name) <= 16 or '\n' in name:
        return await msg.reply_text("‚ùó –ò–º—è –ø–∏—Ç–æ–º—Ü–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤.")
    chat_id = update.effective_chat.id
    uid = update.effective_user.id
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT 1 FROM players WHERE chat_id=? AND user_id=?", (chat_id, uid))
    if c.fetchone():
        conn.close()
        return await msg.reply_text("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !whale-name –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
    c.execute("INSERT INTO players(chat_id,user_id,pet_name,weight,balance,last_feed) VALUES(?,?,?,?,?,?)",
              (chat_id, uid, name, 0, 0, None))
    conn.commit()
    conn.close()
    await msg.reply_text(f"‚ùó –í–∞—à –ø–∏—Ç–æ–º–µ—Ü '{name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !feed –¥–ª—è –∫–æ—Ä–º—ë–∂–∫–∏.")


@only_group_chats
async def feed_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    chat_id = update.effective_chat.id
    uid = update.effective_user.id
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT pet_name,weight,balance,last_feed FROM players WHERE chat_id=? AND user_id=?", (chat_id, uid))
    row = c.fetchone()
    if not row:
        conn.close()
        return await msg.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ !whale '–ò–º—è –ø–∏—Ç–æ–º—Ü–∞'")
    name, weight, balance, last_feed = row
    now = datetime.utcnow()

    # Parse cooldown combination
    raw_cd = get_setting(chat_id, 'cooldown', '24h') or '24h'
    total_sec = 0
    for token in raw_cd.split():
        if token.endswith('h') and token[:-1].isdigit():
            total_sec += int(token[:-1])*3600
        elif token.endswith('m') and token[:-1].isdigit():
            total_sec += int(token[:-1])*60
        elif token.endswith('s') and token[:-1].isdigit():
            total_sec += int(token[:-1])
        elif token.isdigit():
            total_sec += int(token)*3600
    cd_delta = timedelta(seconds=total_sec)

    if last_feed:
        last = datetime.fromisoformat(last_feed)
        if now < last + cd_delta:
            rem = last + cd_delta - now
            hrs = rem.seconds//3600
            mins = (rem.seconds%3600)//60
            secs = rem.seconds%60
            conn.close()
            return await msg.reply_text(f"‚è≥ –ñ–¥–∏—Ç–µ –µ—â—ë: {hrs} —á {mins} –º–∏–Ω {secs} —Å–µ–∫.")

    # Settings
    gain_min = int(get_setting(chat_id,'gain_min','1'))
    gain_max = int(get_setting(chat_id,'gain_max','10'))
    loss_min = int(get_setting(chat_id,'loss_min','1'))
    loss_max = int(get_setting(chat_id,'loss_max','5'))
    chance = int(get_setting(chat_id,'chance','50'))
    coeff = int(get_setting(chat_id,'coeff','2'))

    # Outcome
    if random.randint(1,100) <= chance:
        delta = random.randint(gain_min, gain_max)
        weight += delta
        balance += delta//coeff

        if delta > gain_max * 0.7:
            text = f"üò≤ –û–≥–æ, {name} —Å–µ–ª —Ä–æ—Å–∫–æ—à–Ω—É—é –µ–¥—É, –∏ –ø–æ–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ {delta} –∫–≥ –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {delta // coeff} —Å–µ—Ä–¥–µ—á–µ–∫ ‚ù§Ô∏è"
        else:
            text = f"üòã –û—Ç–ª–∏—á–Ω–æ! {name} –ø–æ–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ {delta} –∫–≥ –∏ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {delta // coeff} —Å–µ—Ä–¥–µ—á–µ–∫ ‚ù§Ô∏è"
    else:
        delta = random.randint(loss_min, loss_max)
        weight = max(0, weight-delta)

        if delta > loss_max * 0.7:
            text = f"ü•¥ –£–ø—Å, {name} —Å–µ–ª –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—É—é –µ–¥—É, –∏ –ø–æ—Ö—É–¥–µ–ª –Ω–∞ {delta} –∫–≥."
        else:
            text = f"ü´§ –£–ø—Å, {name} —Å–µ–ª –ø–ª–æ—Ö—É—é –µ–¥—É, –∏ –ø–æ—Ö—É–¥–µ–ª –Ω–∞ {delta} –∫–≥."

    c.execute("UPDATE players SET weight=?,balance=?,last_feed=? WHERE chat_id=? AND user_id=?",
              (weight, balance, now.isoformat(), chat_id, uid))
    conn.commit()
    conn.close()
    await msg.reply_text(text)


@only_group_chats
async def leaders_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # !leaders
    msg = update.message
    chat_id = update.effective_chat.id
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT user_id, pet_name, weight FROM players WHERE chat_id=? ORDER BY weight DESC LIMIT 10", (chat_id,))
    rows = c.fetchall()
    conn.close()
    if not rows:
        return await msg.reply_text("üë§ –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
    lines = []
    for idx, (uid, name, wt) in enumerate(rows, 1):
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            mention = mention_html(uid, member.user.first_name)
        except:
            mention = mention_html(uid, f"id{uid}")
        if idx == 1:
            lines.append(f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ 1: <b>{name}</b>")
            lines.append(f"‚öñÔ∏è –í–µ—Å: {wt} –∫–≥")
            lines.append(f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {mention}\n")
        else:
            lines.append(f"üéñÔ∏è –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ {idx}: <b>{name}</b>")
            lines.append(f"‚öñÔ∏è –í–µ—Å: {wt} –∫–≥")
            lines.append(f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {mention}\n")
    await msg.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)


@only_group_chats
async def info_whale(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã: !info-whale"""
    chat_id = update.effective_chat.id
    # Default values
    defaults = {
        'cooldown': '24h',
        'gain_min': '1', 'gain_max': '10',
        'loss_min': '1', 'loss_max': '5',
        'chance': '50', 'coeff': '2',
        'object_name': '–ö–∏—Ç'
    }
    # Fetch settings
    cfg = {}
    for key, defval in defaults.items():
        cfg[key] = get_setting(chat_id, key, defval)
    # Human-readable cooldown
    total_sec = 0
    for token in cfg['cooldown'].split():
        if token.endswith('h') and token[:-1].isdigit(): total_sec += int(token[:-1]) * 3600
        elif token.endswith('m') and token[:-1].isdigit(): total_sec += int(token[:-1]) * 60
        elif token.endswith('s') and token[:-1].isdigit(): total_sec += int(token[:-1])
        elif token.isdigit(): total_sec += int(token) * 3600
    cd = timedelta(seconds=total_sec)
    hrs, rem = divmod(cd.seconds, 3600)
    mins, secs = divmod(rem, 60)
    cooldown_str = f"{hrs}—á {mins}–º {secs}—Å"
    # Build message
    text = (
        f"üè∑ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã '{cfg['object_name']}'</b> üè∑\n"
        f"‚è± <b>–ö—É–ª–¥–∞—É–Ω:</b> {cooldown_str}\n"
        f"‚öñÔ∏è <b>–£—Å–ø–µ—Ö:</b> {cfg['gain_min']}‚Äì{cfg['gain_max']} –∫–≥\n"
        f"üìâ <b>–ù–µ—É–¥–∞—á–∞:</b> {cfg['loss_min']}‚Äì{cfg['loss_max']} –∫–≥\n"
        f"üéØ <b>–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞:</b> {cfg['chance']}%\n"
        f"‚ù§Ô∏è <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–µ—Ä–¥–µ—Ü:</b> 1 —Å–µ—Ä–¥—Ü–µ –∑–∞ {cfg['coeff']} –∫–≥\n"
        f"üê≥ <b>–û–±—ä–µ–∫—Ç:</b> {cfg['object_name']}"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)


@only_group_chats
async def profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    chat_id = update.effective_chat.id
    uid = update.effective_user.id
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT pet_name,weight,balance FROM players WHERE chat_id=? AND user_id=?", (chat_id, uid))
    row = c.fetchone()
    if not row:
        conn.close()
        return await msg.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ !whale '–ò–º—è –ø–∏—Ç–æ–º—Ü–∞'")
    name, weight, balance = row
    c.execute("SELECT COUNT(*)+1 FROM players WHERE chat_id=? AND weight>?", (chat_id, weight))
    rank = c.fetchone()[0]
    conn.close()
    text = (
        f"üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"üê≥ –ü–∏—Ç–æ–º–µ—Ü: <b>{name}</b>\n"
        f"‚öñÔ∏è –í–µ—Å: <b>{weight}</b> –∫–≥\n"
        f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: <b>{rank}</b>\n"
        f"‚ù§Ô∏è –°–µ—Ä–¥—Ü–∞: <b>{balance}</b>"
    )
    await msg.reply_text(text, parse_mode=ParseMode.HTML)
