import re
import json
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ContextTypes
)

import logging
logger = logging.getLogger(__name__)

ADMIN_ID = 5403794760  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID
CHAT_HISTORY_FILE = "database/chat_history.json"


def log_message(user_id: int, sender_id: str, sender_name: str, message_type: str, content: str):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ chat_history.json.
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –≤–µ–¥—ë—Ç—Å—è
    - sender_id: 'BOT' (–∏–ª–∏ 'ADMIN'), –ª–∏–±–æ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    - sender_name: –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–¥–ª—è –±–æ—Ç–∞ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 'BOT')
    - message_type: —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è ('text', 'photo', 'video', 'document', 'other')
    - content: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä '[–§–æ—Ç–æ]')
    """
    log_entry = {
        "user_id": str(user_id),
        "sender_id": str(sender_id),
        "sender_name": sender_name,
        "timestamp": datetime.utcnow().isoformat(),
        "message_type": message_type,
        "content": content
    }

    try:
        with open(CHAT_HISTORY_FILE, "r", encoding="utf-8") as f:
            logs = json.load(f)
    except Exception:
        logs = []

    logs.append(log_entry)

    with open(CHAT_HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(logs, f, indent=2, ensure_ascii=False)


async def private_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ù–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –æ–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω—É,
    –∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç. –ü—Ä–∏ —ç—Ç–æ–º –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç —Ç–æ–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è.
    """
    chat = update.effective_chat
    user = update.effective_user

    # –¢–æ–ª—å–∫–æ –õ–° –∏ –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞
    if chat.type == "private" and user.id != ADMIN_ID:
        message = update.message
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.text:
            message_type = "text"
            content = message.text
        elif message.photo:
            message_type = "photo"
            content = "[–§–æ—Ç–æ]"
        elif message.document:
            message_type = "document"
            content = "[–î–æ–∫—É–º–µ–Ω—Ç]"
        elif message.video:
            message_type = "video"
            content = "[–í–∏–¥–µ–æ]"
        else:
            message_type = "other"
            content = "[–î—Ä—É–≥–æ–µ]"

        # 1) –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_message(
            user_id=user.id,
            sender_id=user.id,
            sender_name=user.full_name,
            message_type=message_type,
            content=content
        )

        # 2) –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        text_for_admin = (
            f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.full_name} (ID: {user.id}):\n"
            f"{content if message.text else '[–ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}"
        )
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=text_for_admin)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ
        auto_reply_text = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!"
        sent_msg = await update.message.reply_text(auto_reply_text)

        # –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        log_message(
            user_id=user.id,
            sender_id="BOT",
            sender_name="BOT",
            message_type="text",
            content=auto_reply_text
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç (filters.PRIVATE)
        pass


async def reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /reply <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>
    –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º, –∫–æ–º—É –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.
    """
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if not args or len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    user_id = int(args[0])
    reply_text = " ".join(args[1:])

    try:
        await context.bot.send_message(chat_id=user_id, text=reply_text)
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        target_chat = await context.bot.get_chat(user_id)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º full_name, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ title
        target_name = getattr(target_chat, "full_name", None) or target_chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name} (ID: {user_id})!")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        log_message(
            user_id=user_id,
            sender_id="BOT",
            sender_name="BOT",
            message_type="text",
            content=reply_text
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def send_photo_caption_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # print("DEBUG: send_photo_caption_handler –≤—ã–∑–≤–∞–Ω–∞")
    caption = update.message.caption or ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∏–∑ caption.
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "/send_photo <user_id> <—Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏>"
    match = re.match(r"^/send_photo\s+(\d+)(?:\s+(.*))?$", caption)
    if not match:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_photo <user_id> <—Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏>")
        return

    try:
        user_id = int(match.group(1))
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_photo <user_id> <—Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏>")
        return

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    message_text = match.group(2) if match.group(2) is not None else ""
    # print(f"DEBUG: –¶–µ–ª–µ–≤–æ–π user_id: {user_id}")
    # print(f"DEBUG: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {message_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not update.message.photo:
        await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.")
        return

    file_id = update.message.photo[-1].file_id
    # print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω file_id: {file_id}")

    try:
        await context.bot.send_photo(
            chat_id=user_id,
            photo=file_id,
            caption=message_text
        )
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        target_chat = await context.bot.get_chat(user_id)
        target_name = getattr(target_chat, "full_name", None) or target_chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        await update.message.reply_text(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name} (ID: {user_id})!")
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è log_message –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
        log_message(
            user_id=user_id,
            sender_id="BOT",
            sender_name="BOT",
            message_type="photo",
            content=f"[{message_text}]"
        )
        # print("DEBUG: –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")


async def send_video_caption_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # print("DEBUG: send_video_caption_handler –≤—ã–∑–≤–∞–Ω–∞")
    caption = update.message.caption or ""

    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∏–∑ caption.
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "/send_video <user_id> <—Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏>"
    match = re.match(r"^/send_video\s+(\d+)(?:\s+(.*))?$", caption)
    if not match:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_video <user_id> <—Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏>")
        return

    try:
        user_id = int(match.group(1))
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_video <user_id> <—Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏>")
        return

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    message_text = match.group(2) if match.group(2) is not None else ""
    # print(f"DEBUG: –¶–µ–ª–µ–≤–æ–π user_id: {user_id}")
    # print(f"DEBUG: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {message_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not update.message.video:
        await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.")
        return

    file_id = update.message.video.file_id
    # print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω file_id –≤–∏–¥–µ–æ: {file_id}")

    try:
        await context.bot.send_video(
            chat_id=user_id,
            video=file_id,
            caption=message_text
        )
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        target_chat = await context.bot.get_chat(user_id)
        target_name = getattr(target_chat, "full_name", None) or target_chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        await update.message.reply_text(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_name} (ID: {user_id})!")
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è log_message –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
        log_message(
            user_id=user_id,
            sender_id="BOT",
            sender_name="BOT",
            message_type="video",
            content=f"[{message_text}]"
        )
        # print("DEBUG: –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")


# ============ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ ============

async def export_users_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–∏—Å–∞–≤—à–∏—Ö –±–æ—Ç—É (–∏–ª–∏ –∫–æ–º—É –±–æ—Ç –ø–∏—Å–∞–ª).
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ database/users_list.txt, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        with open(CHAT_HISTORY_FILE, "r", encoding="utf-8") as f:
            logs = json.load(f)
    except Exception:
        logs = []

    users = {}
    for entry in logs:
        uid = entry.get("user_id")
        sender_name = entry.get("sender_name")
        # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ sender_name, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç—Ç–∏–º user_id
        # (–æ–±—ã—á–Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –µ—Å–ª–∏ sender_id="BOT", —ç—Ç–æ –Ω–µ –∑–∞—Ç—Ä–æ–Ω–µ—Ç user_id)
        if uid not in users:
            users[uid] = sender_name

    lines = []
    for uid, name in users.items():
        lines.append(f"ID: {uid}, –ò–º—è: {name}")

    output_text = "\n".join(lines) if lines else "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    with open("database/users_list.txt", "w", encoding="utf-8") as f:
        f.write(output_text)

    try:
        await context.bot.send_document(
            chat_id=ADMIN_ID,
            document=open("database/users_list.txt", "rb"),
            filename="database/users_list.txt",
            caption="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")


async def export_chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º user_id.
    –§–æ—Ä–º–∞—Ç: /export_chat <user_id>
    –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî txt-—Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = context.args
    if not args or len(args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export_chat <user_id>")
        return

    target_user_id = args[0]
    try:
        with open(CHAT_HISTORY_FILE, "r", encoding="utf-8") as f:
            logs = json.load(f)
    except Exception:
        logs = []

    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å target_user_id
    filtered = [entry for entry in logs if entry.get("user_id") == str(target_user_id)]
    if not filtered:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    lines = []
    for entry in filtered:
        timestamp = entry.get("timestamp")
        sender_name = entry.get("sender_name")
        message_type = entry.get("message_type")
        content = entry.get("content")
        lines.append(f"{timestamp} | {sender_name} [{message_type}]: {content}")

    output_text = "\n".join(lines)
    filename = f"database/chat_ID{target_user_id}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        f.write(output_text)

    try:
        await context.bot.send_document(
            chat_id=ADMIN_ID,
            document=open(filename, "rb"),
            filename=filename,
            caption=f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {target_user_id}"
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")