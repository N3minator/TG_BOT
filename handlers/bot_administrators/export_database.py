import os
from telegram import Update, InputFile
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ ID –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É !export_db (–ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ë–æ—Ç–∞)
TRUSTED_USERS = [5403794760]

DATABASE_PATH = "database"

DB_DESCRIPTIONS = {
    "admin_db.json": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö –≥—Ä—É–ø–ø—ã –∏ —É—Ä–æ–≤–Ω—è—Ö –¥–æ—Å—Ç—É–ø–∞.",
    "chat_history.json": "–ò—Å—Ç–æ—Ä–∏—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ë–æ—Ç–æ–º",
    "cooldowns.json": "–í—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ö–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ì—Ä—É–ø–ø–∞—Ö",
    "users.json": "–°–≤—è–∑–∫–∞ username –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
    "roulette_lobbies.json": "–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏ –∏–≥—Ä—ã '–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞'.",
    "roulette_settings.json": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã '–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞' –ø–æ –≥—Ä—É–ø–ø–∞–º.",
}

WAITING_FOR_CHOICE = 0


async def export_db_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in TRUSTED_USERS:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –ë–æ—Ç–∞ ‚ùå")
        return ConversationHandler.END

    files = os.listdir(DATABASE_PATH)
    files_text = "üóÉ <b>–§–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"

    for filename in files:
        desc = DB_DESCRIPTIONS.get(filename, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        files_text += f"üìÑ <code>{filename}</code>\n- <i>{desc}</i>\n\n"

    files_text += (
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>all</b>, —á—Ç–æ–±—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –±–∞–∑—É."
        f"\n\n‚åõ –ë–æ—Ç –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 1-–π –º–∏–Ω—É—Ç—ã..."
    )

    sent = await update.message.reply_html(files_text)
    context.user_data["export_prompt_id"] = sent.message_id
    return WAITING_FOR_CHOICE


async def send_real_file(context, chat_id, file_path, file_name):
    try:
        with open(file_path, "rb") as f:
            await context.bot.send_document(
                chat_id=chat_id,
                document=InputFile(f, filename=file_name)
            )
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {file_name}: {e}")


async def export_db_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    choice = message.text.strip()
    files = os.listdir(DATABASE_PATH)
    prompt_id = context.user_data.get("export_prompt_id")

    is_reply = (
        message.reply_to_message and message.reply_to_message.message_id == prompt_id
    )
    is_direct = not message.reply_to_message or prompt_id is None

    if not is_reply and not is_direct:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ !export_db.")
        return WAITING_FOR_CHOICE

    if choice == "all":
        for file in files:
            path = os.path.join(DATABASE_PATH, file)
            if os.path.isfile(path):
                await send_real_file(context, message.chat_id, path, file)
        await message.reply_text("‚úÖ –í—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    elif choice in files:
        path = os.path.join(DATABASE_PATH, choice)
        if os.path.isfile(path):
            await send_real_file(context, message.chat_id, path, choice)
            await message.reply_html(f"‚úÖ –§–∞–π–ª <b>{choice}</b> —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
        else:
            await message.reply_text("‚ùå –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è.")
    else:
        await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞. –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω.")

    return ConversationHandler.END


async def export_db_timeout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚åõ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END


# –í–µ—Ä—Å–∏—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
export_db_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex(r"^!export_db$"), export_db_handler)],
    states={
        WAITING_FOR_CHOICE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, export_db_choice_handler)
        ]
    },
    fallbacks=[MessageHandler(filters.ALL, export_db_timeout)],
    conversation_timeout=60
)


# –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç !export_db all –∏–ª–∏ !export_db file.json –Ω–∞–ø—Ä—è–º—É—é
async def export_db_handler_immediate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in TRUSTED_USERS:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –ë–æ—Ç–∞ ‚ùå")
        return

    message = update.message
    text = message.text.strip()
    parts = text.split()

    if len(parts) < 2:
        return  # –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø—É—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±—ã—á–Ω—ã–π handler

    arg = parts[1]
    files = os.listdir(DATABASE_PATH)

    if arg == "all":
        for file in files:
            path = os.path.join(DATABASE_PATH, file)
            if os.path.isfile(path):
                await send_real_file(context, message.chat_id, path, file)
        await message.reply_text("‚úÖ –í—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    elif arg in files:
        path = os.path.join(DATABASE_PATH, arg)
        if os.path.isfile(path):
            await send_real_file(context, message.chat_id, path, arg)
            await message.reply_html(f"‚úÖ –§–∞–π–ª <b>{arg}</b> —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")
        else:
            await message.reply_text("‚ùå –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è.")
    else:
        await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.")