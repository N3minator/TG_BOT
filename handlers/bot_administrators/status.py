import psutil
import platform
import time
import io
import matplotlib.pyplot as plt
from datetime import datetime, timedelta, timezone
from telegram import Update, InputFile
from telegram.ext import ContextTypes

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ !status
ALLOWED_USER_IDS = [5403794760, 5742749531]

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ !debug-all
SUPER_ADMIN_IDS = [5403794760, 5742749531]

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
start_time = time.time()


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("‚õî –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –ë–æ—Ç–∞ ‚õî")
        return

    uptime = timedelta(seconds=int(time.time() - start_time))
    boot_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(psutil.boot_time()))
    cpu_percent = psutil.cpu_percent(interval=1)
    cpu_cores = psutil.cpu_percent(interval=1, percpu=True)
    ram = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    system = platform.system()
    machine = platform.machine()

    text = (
        f"üñ•Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"üîß OS: <b>{system}</b> ({machine})\n"
        f"‚è± –ê–ø—Ç–∞–π–º: <code>{uptime}</code>\n"
        f"üìÜ –ó–∞–ø—É—â–µ–Ω: <code>{boot_time}</code>\n"
        f"üìä CPU: <b>{cpu_percent}%</b>\n"
        f"üì¶ RAM: <b>{ram.percent}%</b> –∏–∑ {round(ram.total / 1024**3, 1)} GB\n"
        f"üíΩ –î–∏—Å–∫: <b>{disk.percent}%</b> –∏–∑ {round(disk.total / 1024**3, 1)} GB"
    )

    await update.message.reply_text(text, parse_mode="HTML")

    # CPU –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(9, 4))
    plt.bar(range(len(cpu_cores)), cpu_cores)
    plt.title("–ó–∞–≥—Ä—É–∑–∫–∞ CPU –ø–æ —è–¥—Ä–∞–º")
    plt.xlabel("–Ø–¥—Ä–æ")
    plt.ylabel("–ó–∞–≥—Ä—É–∑–∫–∞ (%)")
    plt.tight_layout()

    buffer = io.BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    buffer.name = "cpu_status.png"
    plt.close()

    await update.message.reply_photo(photo=buffer, caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CPU –ø–æ —è–¥—Ä–∞–º")


async def debugall_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in SUPER_ADMIN_IDS:
        await update.message.reply_text("üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –ë–æ—Ç–∞ üö´")
        return

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    boot_time = datetime.fromtimestamp(psutil.boot_time(), tz=timezone.utc).astimezone(timezone(timedelta(hours=2)))
    uptime = timedelta(seconds=int(time.time() - psutil.boot_time()))
    cpu_percent_total = psutil.cpu_percent()
    cpu_percent_cores = psutil.cpu_percent(percpu=True)
    ram = psutil.virtual_memory()
    swap = psutil.swap_memory()
    disk = psutil.disk_usage('/')
    net = psutil.net_io_counters()
    load_avg = psutil.getloadavg() if hasattr(psutil, "getloadavg") else (0, 0, 0)

    # –¢–æ–ø 5 –ø–æ CPU
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        try:
            processes.append(proc.info)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    top_cpu = sorted(processes, key=lambda x: x['cpu_percent'], reverse=True)[:5]
    top_mem = sorted(processes, key=lambda x: x['memory_percent'], reverse=True)[:5]

    # CPU –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(8, 4))
    plt.bar(range(len(cpu_percent_cores)), cpu_percent_cores)
    plt.xlabel('–Ø–¥—Ä–æ')
    plt.ylabel('–ó–∞–≥—Ä—É–∑–∫–∞ (%)')
    plt.title('–ó–∞–≥—Ä—É–∑–∫–∞ CPU –ø–æ —è–¥—Ä–∞–º')
    plt.tight_layout()

    cpu_img = io.BytesIO()
    plt.savefig(cpu_img, format='png')
    cpu_img.seek(0)
    cpu_img.name = "cpu_debug.png"
    plt.close()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    used_gb = round(ram.used / 1024**3, 1)
    free_gb = round((ram.total - ram.used) / 1024**3, 1)
    text = (
        f"<b>üß† –ü–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ç—á—ë—Ç</b>\n\n"
        f"üñ• <b>OS:</b> {platform.system()} ({platform.machine()})\n"
        f"‚è± <b>–ê–ø—Ç–∞–π–º:</b> <code>{uptime}</code>\n"
        f"üöÄ <b>–ó–∞–ø—É—â–µ–Ω:</b> {boot_time.strftime('%Y-%m-%d %H:%M:%S')} (UTC+2)\n"
        f"üìä <b>CPU:</b> {cpu_percent_total}% (—è–¥–µ—Ä: {psutil.cpu_count(logical=True)})\n"
        f"üìà <b>Load Avg:</b> {load_avg}\n"
        f"üíæ <b>RAM:</b> {ram.percent}% –∏–∑ {round(ram.total / 1024**3, 1)} GB\n"
        f"‚è≥ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {used_gb} GB | –°–≤–æ–±–æ–¥–Ω–æ: {free_gb} GB\n"
        f"üìÑ <b>SWAP:</b> {swap.percent}% –∏–∑ {round(swap.total / 1024**3, 1)} GB\n"
        f"üóÇ <b>–î–∏—Å–∫:</b> {disk.percent}% –∏–∑ {round(disk.total / 1024**3, 1)} GB\n"
        f"üåê <b>–°–µ—Ç—å:</b> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {round(net.bytes_sent / 1024**2, 1)} MB | –ü–æ–ª—É—á–µ–Ω–æ: {round(net.bytes_recv / 1024**2, 1)} MB\n\n"
        f"<b>üî• –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU:</b>\n"
    )
    for proc in top_cpu:
        text += f"üîπ {proc['name']} (PID {proc['pid']}): {proc['cpu_percent']}%\n"

    text += "\n<b>üíæ –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–∞–º—è—Ç–∏:</b>\n"
    for proc in top_mem:
        text += f"üü¶ {proc['name']} (PID {proc['pid']}): {proc['memory_percent']:.1f}%\n"

    await update.message.reply_text(text, parse_mode="HTML")
    await update.message.reply_photo(InputFile(cpu_img), caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CPU –ø–æ —è–¥—Ä–∞–º")