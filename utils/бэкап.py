import json
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

RULES_DB = "database/rules_db.json"
MAX_RULES_PAGES = 10

# Conversation states for ConversationHandler
ASK_PAGE, ASK_TEXT = range(2)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞


def load_rules():
    if not os.path.exists(RULES_DB):
        return {}
    with open(RULES_DB, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤ —Ñ–∞–π–ª


def save_rules(data):
    with open(RULES_DB, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã


def get_rules_for_page(chat_id: str, page: int) -> str:
    rules = load_rules().get(str(chat_id), [])
    if 0 < page <= len(rules):
        return rules[page - 1]
    return "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É –ø—Ä–∞–≤–∏–ª."

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö


def generate_rules_keyboard(user_id: int, page: int, total_pages: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"rules_refresh|{user_id}|{page}"),
            InlineKeyboardButton(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}", callback_data="noop")
        ],
        [
            InlineKeyboardButton("‚è™ << –ù–∞–∑–∞–¥", callback_data=f"rules_prev|{user_id}|{page}"),
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >> ‚è©", callback_data=f"rules_next|{user_id}|{page}")
        ]
    ])


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã !rules
async def rules_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = str(update.effective_chat.id)

    rules = load_rules().get(chat_id, [])
    page = 1
    total = max(1, len(rules))
    text = get_rules_for_page(chat_id, page)

    await update.message.reply_text(
        text=text,
        reply_markup=generate_rules_keyboard(user_id, page, total),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü)
async def rules_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")  # rules_action|user_id|page

    if len(data) < 3:
        return

    action, sender_id, current_page = data[0], data[1], int(data[2])

    if str(query.from_user.id) != sender_id:
        await query.answer("–í—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏ —ç—Ç—É –ø–∞–Ω–µ–ª—å!", show_alert=True)
        return

    chat_id = str(update.effective_chat.id)
    rules = load_rules().get(chat_id, [])
    total_pages = max(1, len(rules))

    if action == "rules_next":
        next_page = current_page + 1 if current_page < total_pages else 1
    elif action == "rules_prev":
        next_page = current_page - 1 if current_page > 1 else total_pages
    elif action == "rules_refresh":
        next_page = current_page
    else:
        return

    text = get_rules_for_page(chat_id, next_page)
    if action == "rules_refresh":
        from datetime import datetime
        text += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"

    await query.edit_message_text(
        text=text,
        reply_markup=generate_rules_keyboard(sender_id, next_page, total_pages),
        parse_mode="HTML"
    )


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª —á–µ—Ä–µ–∑ !set-rules ===
async def set_rules_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    member = await context.bot.get_chat_member(chat.id, user.id)
    if member.status != "creator":
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞.")
        return ConversationHandler.END

    context.user_data['chat_id'] = str(chat.id)

    text_parts = update.message.text.strip().split()
    if len(text_parts) == 2 and text_parts[1].isdigit():
        page = int(text_parts[1])
        if not (1 <= page <= MAX_RULES_PAGES):
            await update.message.reply_text("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            return ConversationHandler.END

        rules = load_rules().get(context.user_data['chat_id'], [])
        if page > len(rules) + 1:
            await update.message.reply_text("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –ø—Ä–µ–¥—ã–¥—É—â–∞—è –µ—â—ë –ø—É—Å—Ç–∞—è")
            return ConversationHandler.END

        context.user_data['page'] = page
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return ASK_TEXT

    await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è? (1-10)")
    return ASK_PAGE


async def set_rules_receive_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        page = int(update.message.text.strip())
        if not (1 <= page <= MAX_RULES_PAGES):
            raise ValueError
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        return ASK_PAGE

    chat_id = context.user_data['chat_id']
    rules = load_rules().get(chat_id, [])

    if page > len(rules) + 1:
        await update.message.reply_text("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø–æ–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    context.user_data['page'] = page
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    return ASK_TEXT


async def set_rules_receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.user_data['chat_id']
    page = context.user_data['page']
    rules_data = load_rules()
    rules = rules_data.get(chat_id, [])

    while len(rules) < page:
        rules.append("")

    rules[page - 1] = update.message.text.strip()
    rules_data[chat_id] = rules
    save_rules(rules_data)

    await update.message.reply_text(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    return ConversationHandler.END


async def set_rules_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END


# === –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∞–≤–∏–ª —á–µ—Ä–µ–∑ !del-rules X ===
async def delete_rules_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    member = await context.bot.get_chat_member(chat.id, user.id)

    if member.status != "creator":
        await update.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã.")
        return

    args = update.message.text.strip().split()
    if len(args) != 2 or not args[1].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !del-rules <–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã>")
        return

    page_to_delete = int(args[1])
    chat_id = str(chat.id)
    rules_data = load_rules()
    rules = rules_data.get(chat_id, [])

    if not (1 <= page_to_delete <= len(rules)):
        await update.message.reply_text("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç–∞.")
        return

    del rules[page_to_delete - 1]  # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    rules_data[chat_id] = rules  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å
    save_rules(rules_data)

    await update.message.reply_text(f"üóë –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")